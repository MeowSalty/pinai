// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MeowSalty/pinai/database/types"
)

func newHealth(db *gorm.DB, opts ...gen.DOOption) health {
	_health := health{}

	_health.healthDo.UseDB(db, opts...)
	_health.healthDo.UseModel(&types.Health{})

	tableName := _health.healthDo.TableName()
	_health.ALL = field.NewAsterisk(tableName)
	_health.ID = field.NewUint(tableName, "id")
	_health.ResourceType = field.NewInt8(tableName, "resource_type")
	_health.ResourceID = field.NewUint(tableName, "resource_id")
	_health.RelatedPlatformID = field.NewUint(tableName, "related_platform_id")
	_health.RelatedAPIKeyID = field.NewUint(tableName, "related_api_key_id")
	_health.Status = field.NewInt8(tableName, "status")
	_health.RetryCount = field.NewInt(tableName, "retry_count")
	_health.NextAvailableAt = field.NewTime(tableName, "next_available_at")
	_health.BackoffDuration = field.NewInt64(tableName, "backoff_duration")
	_health.LastError = field.NewString(tableName, "last_error")
	_health.LastErrorCode = field.NewInt(tableName, "last_error_code")
	_health.LastCheckAt = field.NewTime(tableName, "last_check_at")
	_health.LastSuccessAt = field.NewTime(tableName, "last_success_at")
	_health.SuccessCount = field.NewInt(tableName, "success_count")
	_health.ErrorCount = field.NewInt(tableName, "error_count")
	_health.CreatedAt = field.NewTime(tableName, "created_at")
	_health.UpdatedAt = field.NewTime(tableName, "updated_at")

	_health.fillFieldMap()

	return _health
}

type health struct {
	healthDo

	ALL               field.Asterisk
	ID                field.Uint
	ResourceType      field.Int8
	ResourceID        field.Uint
	RelatedPlatformID field.Uint
	RelatedAPIKeyID   field.Uint
	Status            field.Int8
	RetryCount        field.Int
	NextAvailableAt   field.Time
	BackoffDuration   field.Int64
	LastError         field.String
	LastErrorCode     field.Int
	LastCheckAt       field.Time
	LastSuccessAt     field.Time
	SuccessCount      field.Int
	ErrorCount        field.Int
	CreatedAt         field.Time
	UpdatedAt         field.Time

	fieldMap map[string]field.Expr
}

func (h health) Table(newTableName string) *health {
	h.healthDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h health) As(alias string) *health {
	h.healthDo.DO = *(h.healthDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *health) updateTableName(table string) *health {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewUint(table, "id")
	h.ResourceType = field.NewInt8(table, "resource_type")
	h.ResourceID = field.NewUint(table, "resource_id")
	h.RelatedPlatformID = field.NewUint(table, "related_platform_id")
	h.RelatedAPIKeyID = field.NewUint(table, "related_api_key_id")
	h.Status = field.NewInt8(table, "status")
	h.RetryCount = field.NewInt(table, "retry_count")
	h.NextAvailableAt = field.NewTime(table, "next_available_at")
	h.BackoffDuration = field.NewInt64(table, "backoff_duration")
	h.LastError = field.NewString(table, "last_error")
	h.LastErrorCode = field.NewInt(table, "last_error_code")
	h.LastCheckAt = field.NewTime(table, "last_check_at")
	h.LastSuccessAt = field.NewTime(table, "last_success_at")
	h.SuccessCount = field.NewInt(table, "success_count")
	h.ErrorCount = field.NewInt(table, "error_count")
	h.CreatedAt = field.NewTime(table, "created_at")
	h.UpdatedAt = field.NewTime(table, "updated_at")

	h.fillFieldMap()

	return h
}

func (h *health) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *health) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 17)
	h.fieldMap["id"] = h.ID
	h.fieldMap["resource_type"] = h.ResourceType
	h.fieldMap["resource_id"] = h.ResourceID
	h.fieldMap["related_platform_id"] = h.RelatedPlatformID
	h.fieldMap["related_api_key_id"] = h.RelatedAPIKeyID
	h.fieldMap["status"] = h.Status
	h.fieldMap["retry_count"] = h.RetryCount
	h.fieldMap["next_available_at"] = h.NextAvailableAt
	h.fieldMap["backoff_duration"] = h.BackoffDuration
	h.fieldMap["last_error"] = h.LastError
	h.fieldMap["last_error_code"] = h.LastErrorCode
	h.fieldMap["last_check_at"] = h.LastCheckAt
	h.fieldMap["last_success_at"] = h.LastSuccessAt
	h.fieldMap["success_count"] = h.SuccessCount
	h.fieldMap["error_count"] = h.ErrorCount
	h.fieldMap["created_at"] = h.CreatedAt
	h.fieldMap["updated_at"] = h.UpdatedAt
}

func (h health) clone(db *gorm.DB) health {
	h.healthDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h health) replaceDB(db *gorm.DB) health {
	h.healthDo.ReplaceDB(db)
	return h
}

type healthDo struct{ gen.DO }

type IHealthDo interface {
	gen.SubQuery
	Debug() IHealthDo
	WithContext(ctx context.Context) IHealthDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHealthDo
	WriteDB() IHealthDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHealthDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHealthDo
	Not(conds ...gen.Condition) IHealthDo
	Or(conds ...gen.Condition) IHealthDo
	Select(conds ...field.Expr) IHealthDo
	Where(conds ...gen.Condition) IHealthDo
	Order(conds ...field.Expr) IHealthDo
	Distinct(cols ...field.Expr) IHealthDo
	Omit(cols ...field.Expr) IHealthDo
	Join(table schema.Tabler, on ...field.Expr) IHealthDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHealthDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHealthDo
	Group(cols ...field.Expr) IHealthDo
	Having(conds ...gen.Condition) IHealthDo
	Limit(limit int) IHealthDo
	Offset(offset int) IHealthDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHealthDo
	Unscoped() IHealthDo
	Create(values ...*types.Health) error
	CreateInBatches(values []*types.Health, batchSize int) error
	Save(values ...*types.Health) error
	First() (*types.Health, error)
	Take() (*types.Health, error)
	Last() (*types.Health, error)
	Find() ([]*types.Health, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.Health, err error)
	FindInBatches(result *[]*types.Health, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.Health) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHealthDo
	Assign(attrs ...field.AssignExpr) IHealthDo
	Joins(fields ...field.RelationField) IHealthDo
	Preload(fields ...field.RelationField) IHealthDo
	FirstOrInit() (*types.Health, error)
	FirstOrCreate() (*types.Health, error)
	FindByPage(offset int, limit int) (result []*types.Health, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHealthDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h healthDo) Debug() IHealthDo {
	return h.withDO(h.DO.Debug())
}

func (h healthDo) WithContext(ctx context.Context) IHealthDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h healthDo) ReadDB() IHealthDo {
	return h.Clauses(dbresolver.Read)
}

func (h healthDo) WriteDB() IHealthDo {
	return h.Clauses(dbresolver.Write)
}

func (h healthDo) Session(config *gorm.Session) IHealthDo {
	return h.withDO(h.DO.Session(config))
}

func (h healthDo) Clauses(conds ...clause.Expression) IHealthDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h healthDo) Returning(value interface{}, columns ...string) IHealthDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h healthDo) Not(conds ...gen.Condition) IHealthDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h healthDo) Or(conds ...gen.Condition) IHealthDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h healthDo) Select(conds ...field.Expr) IHealthDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h healthDo) Where(conds ...gen.Condition) IHealthDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h healthDo) Order(conds ...field.Expr) IHealthDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h healthDo) Distinct(cols ...field.Expr) IHealthDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h healthDo) Omit(cols ...field.Expr) IHealthDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h healthDo) Join(table schema.Tabler, on ...field.Expr) IHealthDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h healthDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHealthDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h healthDo) RightJoin(table schema.Tabler, on ...field.Expr) IHealthDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h healthDo) Group(cols ...field.Expr) IHealthDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h healthDo) Having(conds ...gen.Condition) IHealthDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h healthDo) Limit(limit int) IHealthDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h healthDo) Offset(offset int) IHealthDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h healthDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHealthDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h healthDo) Unscoped() IHealthDo {
	return h.withDO(h.DO.Unscoped())
}

func (h healthDo) Create(values ...*types.Health) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h healthDo) CreateInBatches(values []*types.Health, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h healthDo) Save(values ...*types.Health) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h healthDo) First() (*types.Health, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.Health), nil
	}
}

func (h healthDo) Take() (*types.Health, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.Health), nil
	}
}

func (h healthDo) Last() (*types.Health, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.Health), nil
	}
}

func (h healthDo) Find() ([]*types.Health, error) {
	result, err := h.DO.Find()
	return result.([]*types.Health), err
}

func (h healthDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.Health, err error) {
	buf := make([]*types.Health, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h healthDo) FindInBatches(result *[]*types.Health, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h healthDo) Attrs(attrs ...field.AssignExpr) IHealthDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h healthDo) Assign(attrs ...field.AssignExpr) IHealthDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h healthDo) Joins(fields ...field.RelationField) IHealthDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h healthDo) Preload(fields ...field.RelationField) IHealthDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h healthDo) FirstOrInit() (*types.Health, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.Health), nil
	}
}

func (h healthDo) FirstOrCreate() (*types.Health, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.Health), nil
	}
}

func (h healthDo) FindByPage(offset int, limit int) (result []*types.Health, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h healthDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h healthDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h healthDo) Delete(models ...*types.Health) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *healthDo) withDO(do gen.Dao) *healthDo {
	h.DO = *do.(*gen.DO)
	return h
}
