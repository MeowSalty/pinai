// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MeowSalty/pinai/database/types"
)

func newRequestLog(db *gorm.DB, opts ...gen.DOOption) requestLog {
	_requestLog := requestLog{}

	_requestLog.requestLogDo.UseDB(db, opts...)
	_requestLog.requestLogDo.UseModel(&types.RequestLog{})

	tableName := _requestLog.requestLogDo.TableName()
	_requestLog.ALL = field.NewAsterisk(tableName)
	_requestLog.ID = field.NewUint(tableName, "id")
	_requestLog.Timestamp = field.NewTime(tableName, "timestamp")
	_requestLog.RequestType = field.NewString(tableName, "request_type")
	_requestLog.ModelName = field.NewString(tableName, "model_name")
	_requestLog.OriginalModelName = field.NewString(tableName, "original_model_name")
	_requestLog.PlatformID = field.NewUint(tableName, "platform_id")
	_requestLog.APIKeyID = field.NewUint(tableName, "api_key_id")
	_requestLog.ModelID = field.NewUint(tableName, "model_id")
	_requestLog.Duration = field.NewInt64(tableName, "duration")
	_requestLog.FirstByteTime = field.NewInt64(tableName, "first_byte_time")
	_requestLog.Success = field.NewBool(tableName, "success")
	_requestLog.ErrorMsg = field.NewString(tableName, "error_msg")
	_requestLog.PromptTokens = field.NewInt(tableName, "prompt_tokens")
	_requestLog.CompletionTokens = field.NewInt(tableName, "completion_tokens")
	_requestLog.TotalTokens = field.NewInt(tableName, "total_tokens")

	_requestLog.fillFieldMap()

	return _requestLog
}

type requestLog struct {
	requestLogDo

	ALL               field.Asterisk
	ID                field.Uint
	Timestamp         field.Time
	RequestType       field.String
	ModelName         field.String
	OriginalModelName field.String
	PlatformID        field.Uint
	APIKeyID          field.Uint
	ModelID           field.Uint
	Duration          field.Int64
	FirstByteTime     field.Int64
	Success           field.Bool
	ErrorMsg          field.String
	PromptTokens      field.Int
	CompletionTokens  field.Int
	TotalTokens       field.Int

	fieldMap map[string]field.Expr
}

func (r requestLog) Table(newTableName string) *requestLog {
	r.requestLogDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r requestLog) As(alias string) *requestLog {
	r.requestLogDo.DO = *(r.requestLogDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *requestLog) updateTableName(table string) *requestLog {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint(table, "id")
	r.Timestamp = field.NewTime(table, "timestamp")
	r.RequestType = field.NewString(table, "request_type")
	r.ModelName = field.NewString(table, "model_name")
	r.OriginalModelName = field.NewString(table, "original_model_name")
	r.PlatformID = field.NewUint(table, "platform_id")
	r.APIKeyID = field.NewUint(table, "api_key_id")
	r.ModelID = field.NewUint(table, "model_id")
	r.Duration = field.NewInt64(table, "duration")
	r.FirstByteTime = field.NewInt64(table, "first_byte_time")
	r.Success = field.NewBool(table, "success")
	r.ErrorMsg = field.NewString(table, "error_msg")
	r.PromptTokens = field.NewInt(table, "prompt_tokens")
	r.CompletionTokens = field.NewInt(table, "completion_tokens")
	r.TotalTokens = field.NewInt(table, "total_tokens")

	r.fillFieldMap()

	return r
}

func (r *requestLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *requestLog) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 15)
	r.fieldMap["id"] = r.ID
	r.fieldMap["timestamp"] = r.Timestamp
	r.fieldMap["request_type"] = r.RequestType
	r.fieldMap["model_name"] = r.ModelName
	r.fieldMap["original_model_name"] = r.OriginalModelName
	r.fieldMap["platform_id"] = r.PlatformID
	r.fieldMap["api_key_id"] = r.APIKeyID
	r.fieldMap["model_id"] = r.ModelID
	r.fieldMap["duration"] = r.Duration
	r.fieldMap["first_byte_time"] = r.FirstByteTime
	r.fieldMap["success"] = r.Success
	r.fieldMap["error_msg"] = r.ErrorMsg
	r.fieldMap["prompt_tokens"] = r.PromptTokens
	r.fieldMap["completion_tokens"] = r.CompletionTokens
	r.fieldMap["total_tokens"] = r.TotalTokens
}

func (r requestLog) clone(db *gorm.DB) requestLog {
	r.requestLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r requestLog) replaceDB(db *gorm.DB) requestLog {
	r.requestLogDo.ReplaceDB(db)
	return r
}

type requestLogDo struct{ gen.DO }

type IRequestLogDo interface {
	gen.SubQuery
	Debug() IRequestLogDo
	WithContext(ctx context.Context) IRequestLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRequestLogDo
	WriteDB() IRequestLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRequestLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRequestLogDo
	Not(conds ...gen.Condition) IRequestLogDo
	Or(conds ...gen.Condition) IRequestLogDo
	Select(conds ...field.Expr) IRequestLogDo
	Where(conds ...gen.Condition) IRequestLogDo
	Order(conds ...field.Expr) IRequestLogDo
	Distinct(cols ...field.Expr) IRequestLogDo
	Omit(cols ...field.Expr) IRequestLogDo
	Join(table schema.Tabler, on ...field.Expr) IRequestLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRequestLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRequestLogDo
	Group(cols ...field.Expr) IRequestLogDo
	Having(conds ...gen.Condition) IRequestLogDo
	Limit(limit int) IRequestLogDo
	Offset(offset int) IRequestLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRequestLogDo
	Unscoped() IRequestLogDo
	Create(values ...*types.RequestLog) error
	CreateInBatches(values []*types.RequestLog, batchSize int) error
	Save(values ...*types.RequestLog) error
	First() (*types.RequestLog, error)
	Take() (*types.RequestLog, error)
	Last() (*types.RequestLog, error)
	Find() ([]*types.RequestLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.RequestLog, err error)
	FindInBatches(result *[]*types.RequestLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.RequestLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRequestLogDo
	Assign(attrs ...field.AssignExpr) IRequestLogDo
	Joins(fields ...field.RelationField) IRequestLogDo
	Preload(fields ...field.RelationField) IRequestLogDo
	FirstOrInit() (*types.RequestLog, error)
	FirstOrCreate() (*types.RequestLog, error)
	FindByPage(offset int, limit int) (result []*types.RequestLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRequestLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r requestLogDo) Debug() IRequestLogDo {
	return r.withDO(r.DO.Debug())
}

func (r requestLogDo) WithContext(ctx context.Context) IRequestLogDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r requestLogDo) ReadDB() IRequestLogDo {
	return r.Clauses(dbresolver.Read)
}

func (r requestLogDo) WriteDB() IRequestLogDo {
	return r.Clauses(dbresolver.Write)
}

func (r requestLogDo) Session(config *gorm.Session) IRequestLogDo {
	return r.withDO(r.DO.Session(config))
}

func (r requestLogDo) Clauses(conds ...clause.Expression) IRequestLogDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r requestLogDo) Returning(value interface{}, columns ...string) IRequestLogDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r requestLogDo) Not(conds ...gen.Condition) IRequestLogDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r requestLogDo) Or(conds ...gen.Condition) IRequestLogDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r requestLogDo) Select(conds ...field.Expr) IRequestLogDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r requestLogDo) Where(conds ...gen.Condition) IRequestLogDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r requestLogDo) Order(conds ...field.Expr) IRequestLogDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r requestLogDo) Distinct(cols ...field.Expr) IRequestLogDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r requestLogDo) Omit(cols ...field.Expr) IRequestLogDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r requestLogDo) Join(table schema.Tabler, on ...field.Expr) IRequestLogDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r requestLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRequestLogDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r requestLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IRequestLogDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r requestLogDo) Group(cols ...field.Expr) IRequestLogDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r requestLogDo) Having(conds ...gen.Condition) IRequestLogDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r requestLogDo) Limit(limit int) IRequestLogDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r requestLogDo) Offset(offset int) IRequestLogDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r requestLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRequestLogDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r requestLogDo) Unscoped() IRequestLogDo {
	return r.withDO(r.DO.Unscoped())
}

func (r requestLogDo) Create(values ...*types.RequestLog) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r requestLogDo) CreateInBatches(values []*types.RequestLog, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r requestLogDo) Save(values ...*types.RequestLog) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r requestLogDo) First() (*types.RequestLog, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.RequestLog), nil
	}
}

func (r requestLogDo) Take() (*types.RequestLog, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.RequestLog), nil
	}
}

func (r requestLogDo) Last() (*types.RequestLog, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.RequestLog), nil
	}
}

func (r requestLogDo) Find() ([]*types.RequestLog, error) {
	result, err := r.DO.Find()
	return result.([]*types.RequestLog), err
}

func (r requestLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.RequestLog, err error) {
	buf := make([]*types.RequestLog, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r requestLogDo) FindInBatches(result *[]*types.RequestLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r requestLogDo) Attrs(attrs ...field.AssignExpr) IRequestLogDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r requestLogDo) Assign(attrs ...field.AssignExpr) IRequestLogDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r requestLogDo) Joins(fields ...field.RelationField) IRequestLogDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r requestLogDo) Preload(fields ...field.RelationField) IRequestLogDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r requestLogDo) FirstOrInit() (*types.RequestLog, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.RequestLog), nil
	}
}

func (r requestLogDo) FirstOrCreate() (*types.RequestLog, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.RequestLog), nil
	}
}

func (r requestLogDo) FindByPage(offset int, limit int) (result []*types.RequestLog, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r requestLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r requestLogDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r requestLogDo) Delete(models ...*types.RequestLog) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *requestLogDo) withDO(do gen.Dao) *requestLogDo {
	r.DO = *do.(*gen.DO)
	return r
}
