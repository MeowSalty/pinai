// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MeowSalty/pinai/database/types"
)

func newPlatform(db *gorm.DB, opts ...gen.DOOption) platform {
	_platform := platform{}

	_platform.platformDo.UseDB(db, opts...)
	_platform.platformDo.UseModel(&types.Platform{})

	tableName := _platform.platformDo.TableName()
	_platform.ALL = field.NewAsterisk(tableName)
	_platform.ID = field.NewUint(tableName, "id")
	_platform.Name = field.NewString(tableName, "name")
	_platform.Format = field.NewString(tableName, "format")
	_platform.BaseURL = field.NewString(tableName, "base_url")
	_platform.RateLimit = field.NewField(tableName, "rate_limit")

	_platform.fillFieldMap()

	return _platform
}

type platform struct {
	platformDo platformDo

	ALL       field.Asterisk
	ID        field.Uint
	Name      field.String
	Format    field.String
	BaseURL   field.String
	RateLimit field.Field

	fieldMap map[string]field.Expr
}

func (p platform) Table(newTableName string) *platform {
	p.platformDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p platform) As(alias string) *platform {
	p.platformDo.DO = *(p.platformDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *platform) updateTableName(table string) *platform {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.Name = field.NewString(table, "name")
	p.Format = field.NewString(table, "format")
	p.BaseURL = field.NewString(table, "base_url")
	p.RateLimit = field.NewField(table, "rate_limit")

	p.fillFieldMap()

	return p
}

func (p *platform) WithContext(ctx context.Context) IPlatformDo { return p.platformDo.WithContext(ctx) }

func (p platform) TableName() string { return p.platformDo.TableName() }

func (p platform) Alias() string { return p.platformDo.Alias() }

func (p platform) Columns(cols ...field.Expr) gen.Columns { return p.platformDo.Columns(cols...) }

func (p *platform) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *platform) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["format"] = p.Format
	p.fieldMap["base_url"] = p.BaseURL
	p.fieldMap["rate_limit"] = p.RateLimit
}

func (p platform) clone(db *gorm.DB) platform {
	p.platformDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p platform) replaceDB(db *gorm.DB) platform {
	p.platformDo.ReplaceDB(db)
	return p
}

type platformDo struct{ gen.DO }

type IPlatformDo interface {
	gen.SubQuery
	Debug() IPlatformDo
	WithContext(ctx context.Context) IPlatformDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlatformDo
	WriteDB() IPlatformDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlatformDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlatformDo
	Not(conds ...gen.Condition) IPlatformDo
	Or(conds ...gen.Condition) IPlatformDo
	Select(conds ...field.Expr) IPlatformDo
	Where(conds ...gen.Condition) IPlatformDo
	Order(conds ...field.Expr) IPlatformDo
	Distinct(cols ...field.Expr) IPlatformDo
	Omit(cols ...field.Expr) IPlatformDo
	Join(table schema.Tabler, on ...field.Expr) IPlatformDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlatformDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlatformDo
	Group(cols ...field.Expr) IPlatformDo
	Having(conds ...gen.Condition) IPlatformDo
	Limit(limit int) IPlatformDo
	Offset(offset int) IPlatformDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlatformDo
	Unscoped() IPlatformDo
	Create(values ...*types.Platform) error
	CreateInBatches(values []*types.Platform, batchSize int) error
	Save(values ...*types.Platform) error
	First() (*types.Platform, error)
	Take() (*types.Platform, error)
	Last() (*types.Platform, error)
	Find() ([]*types.Platform, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.Platform, err error)
	FindInBatches(result *[]*types.Platform, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.Platform) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlatformDo
	Assign(attrs ...field.AssignExpr) IPlatformDo
	Joins(fields ...field.RelationField) IPlatformDo
	Preload(fields ...field.RelationField) IPlatformDo
	FirstOrInit() (*types.Platform, error)
	FirstOrCreate() (*types.Platform, error)
	FindByPage(offset int, limit int) (result []*types.Platform, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlatformDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p platformDo) Debug() IPlatformDo {
	return p.withDO(p.DO.Debug())
}

func (p platformDo) WithContext(ctx context.Context) IPlatformDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p platformDo) ReadDB() IPlatformDo {
	return p.Clauses(dbresolver.Read)
}

func (p platformDo) WriteDB() IPlatformDo {
	return p.Clauses(dbresolver.Write)
}

func (p platformDo) Session(config *gorm.Session) IPlatformDo {
	return p.withDO(p.DO.Session(config))
}

func (p platformDo) Clauses(conds ...clause.Expression) IPlatformDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p platformDo) Returning(value interface{}, columns ...string) IPlatformDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p platformDo) Not(conds ...gen.Condition) IPlatformDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p platformDo) Or(conds ...gen.Condition) IPlatformDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p platformDo) Select(conds ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p platformDo) Where(conds ...gen.Condition) IPlatformDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p platformDo) Order(conds ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p platformDo) Distinct(cols ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p platformDo) Omit(cols ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p platformDo) Join(table schema.Tabler, on ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p platformDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p platformDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p platformDo) Group(cols ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p platformDo) Having(conds ...gen.Condition) IPlatformDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p platformDo) Limit(limit int) IPlatformDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p platformDo) Offset(offset int) IPlatformDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p platformDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlatformDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p platformDo) Unscoped() IPlatformDo {
	return p.withDO(p.DO.Unscoped())
}

func (p platformDo) Create(values ...*types.Platform) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p platformDo) CreateInBatches(values []*types.Platform, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p platformDo) Save(values ...*types.Platform) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p platformDo) First() (*types.Platform, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.Platform), nil
	}
}

func (p platformDo) Take() (*types.Platform, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.Platform), nil
	}
}

func (p platformDo) Last() (*types.Platform, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.Platform), nil
	}
}

func (p platformDo) Find() ([]*types.Platform, error) {
	result, err := p.DO.Find()
	return result.([]*types.Platform), err
}

func (p platformDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.Platform, err error) {
	buf := make([]*types.Platform, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p platformDo) FindInBatches(result *[]*types.Platform, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p platformDo) Attrs(attrs ...field.AssignExpr) IPlatformDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p platformDo) Assign(attrs ...field.AssignExpr) IPlatformDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p platformDo) Joins(fields ...field.RelationField) IPlatformDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p platformDo) Preload(fields ...field.RelationField) IPlatformDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p platformDo) FirstOrInit() (*types.Platform, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.Platform), nil
	}
}

func (p platformDo) FirstOrCreate() (*types.Platform, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.Platform), nil
	}
}

func (p platformDo) FindByPage(offset int, limit int) (result []*types.Platform, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p platformDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p platformDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p platformDo) Delete(models ...*types.Platform) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *platformDo) withDO(do gen.Dao) *platformDo {
	p.DO = *do.(*gen.DO)
	return p
}
