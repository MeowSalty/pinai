// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MeowSalty/pinai/database/types"
)

func newRequestStat(db *gorm.DB, opts ...gen.DOOption) requestStat {
	_requestStat := requestStat{}

	_requestStat.requestStatDo.UseDB(db, opts...)
	_requestStat.requestStatDo.UseModel(&types.RequestStat{})

	tableName := _requestStat.requestStatDo.TableName()
	_requestStat.ALL = field.NewAsterisk(tableName)
	_requestStat.ID = field.NewString(tableName, "id")
	_requestStat.Timestamp = field.NewTime(tableName, "timestamp")
	_requestStat.RequestType = field.NewString(tableName, "request_type")
	_requestStat.ModelName = field.NewString(tableName, "model_name")
	_requestStat.ChannelInfo = field.NewField(tableName, "channel_info")
	_requestStat.Duration = field.NewInt64(tableName, "duration")
	_requestStat.FirstByteTime = field.NewInt64(tableName, "first_byte_time")
	_requestStat.Success = field.NewBool(tableName, "success")
	_requestStat.ErrorMsg = field.NewString(tableName, "error_msg")
	_requestStat.CreatedAt = field.NewTime(tableName, "created_at")
	_requestStat.UpdatedAt = field.NewTime(tableName, "updated_at")

	_requestStat.fillFieldMap()

	return _requestStat
}

type requestStat struct {
	requestStatDo

	ALL           field.Asterisk
	ID            field.String
	Timestamp     field.Time
	RequestType   field.String
	ModelName     field.String
	ChannelInfo   field.Field
	Duration      field.Int64
	FirstByteTime field.Int64
	Success       field.Bool
	ErrorMsg      field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (r requestStat) Table(newTableName string) *requestStat {
	r.requestStatDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r requestStat) As(alias string) *requestStat {
	r.requestStatDo.DO = *(r.requestStatDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *requestStat) updateTableName(table string) *requestStat {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewString(table, "id")
	r.Timestamp = field.NewTime(table, "timestamp")
	r.RequestType = field.NewString(table, "request_type")
	r.ModelName = field.NewString(table, "model_name")
	r.ChannelInfo = field.NewField(table, "channel_info")
	r.Duration = field.NewInt64(table, "duration")
	r.FirstByteTime = field.NewInt64(table, "first_byte_time")
	r.Success = field.NewBool(table, "success")
	r.ErrorMsg = field.NewString(table, "error_msg")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *requestStat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *requestStat) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 11)
	r.fieldMap["id"] = r.ID
	r.fieldMap["timestamp"] = r.Timestamp
	r.fieldMap["request_type"] = r.RequestType
	r.fieldMap["model_name"] = r.ModelName
	r.fieldMap["channel_info"] = r.ChannelInfo
	r.fieldMap["duration"] = r.Duration
	r.fieldMap["first_byte_time"] = r.FirstByteTime
	r.fieldMap["success"] = r.Success
	r.fieldMap["error_msg"] = r.ErrorMsg
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r requestStat) clone(db *gorm.DB) requestStat {
	r.requestStatDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r requestStat) replaceDB(db *gorm.DB) requestStat {
	r.requestStatDo.ReplaceDB(db)
	return r
}

type requestStatDo struct{ gen.DO }

type IRequestStatDo interface {
	gen.SubQuery
	Debug() IRequestStatDo
	WithContext(ctx context.Context) IRequestStatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRequestStatDo
	WriteDB() IRequestStatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRequestStatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRequestStatDo
	Not(conds ...gen.Condition) IRequestStatDo
	Or(conds ...gen.Condition) IRequestStatDo
	Select(conds ...field.Expr) IRequestStatDo
	Where(conds ...gen.Condition) IRequestStatDo
	Order(conds ...field.Expr) IRequestStatDo
	Distinct(cols ...field.Expr) IRequestStatDo
	Omit(cols ...field.Expr) IRequestStatDo
	Join(table schema.Tabler, on ...field.Expr) IRequestStatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRequestStatDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRequestStatDo
	Group(cols ...field.Expr) IRequestStatDo
	Having(conds ...gen.Condition) IRequestStatDo
	Limit(limit int) IRequestStatDo
	Offset(offset int) IRequestStatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRequestStatDo
	Unscoped() IRequestStatDo
	Create(values ...*types.RequestStat) error
	CreateInBatches(values []*types.RequestStat, batchSize int) error
	Save(values ...*types.RequestStat) error
	First() (*types.RequestStat, error)
	Take() (*types.RequestStat, error)
	Last() (*types.RequestStat, error)
	Find() ([]*types.RequestStat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.RequestStat, err error)
	FindInBatches(result *[]*types.RequestStat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.RequestStat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRequestStatDo
	Assign(attrs ...field.AssignExpr) IRequestStatDo
	Joins(fields ...field.RelationField) IRequestStatDo
	Preload(fields ...field.RelationField) IRequestStatDo
	FirstOrInit() (*types.RequestStat, error)
	FirstOrCreate() (*types.RequestStat, error)
	FindByPage(offset int, limit int) (result []*types.RequestStat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRequestStatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r requestStatDo) Debug() IRequestStatDo {
	return r.withDO(r.DO.Debug())
}

func (r requestStatDo) WithContext(ctx context.Context) IRequestStatDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r requestStatDo) ReadDB() IRequestStatDo {
	return r.Clauses(dbresolver.Read)
}

func (r requestStatDo) WriteDB() IRequestStatDo {
	return r.Clauses(dbresolver.Write)
}

func (r requestStatDo) Session(config *gorm.Session) IRequestStatDo {
	return r.withDO(r.DO.Session(config))
}

func (r requestStatDo) Clauses(conds ...clause.Expression) IRequestStatDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r requestStatDo) Returning(value interface{}, columns ...string) IRequestStatDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r requestStatDo) Not(conds ...gen.Condition) IRequestStatDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r requestStatDo) Or(conds ...gen.Condition) IRequestStatDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r requestStatDo) Select(conds ...field.Expr) IRequestStatDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r requestStatDo) Where(conds ...gen.Condition) IRequestStatDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r requestStatDo) Order(conds ...field.Expr) IRequestStatDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r requestStatDo) Distinct(cols ...field.Expr) IRequestStatDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r requestStatDo) Omit(cols ...field.Expr) IRequestStatDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r requestStatDo) Join(table schema.Tabler, on ...field.Expr) IRequestStatDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r requestStatDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRequestStatDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r requestStatDo) RightJoin(table schema.Tabler, on ...field.Expr) IRequestStatDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r requestStatDo) Group(cols ...field.Expr) IRequestStatDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r requestStatDo) Having(conds ...gen.Condition) IRequestStatDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r requestStatDo) Limit(limit int) IRequestStatDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r requestStatDo) Offset(offset int) IRequestStatDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r requestStatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRequestStatDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r requestStatDo) Unscoped() IRequestStatDo {
	return r.withDO(r.DO.Unscoped())
}

func (r requestStatDo) Create(values ...*types.RequestStat) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r requestStatDo) CreateInBatches(values []*types.RequestStat, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r requestStatDo) Save(values ...*types.RequestStat) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r requestStatDo) First() (*types.RequestStat, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.RequestStat), nil
	}
}

func (r requestStatDo) Take() (*types.RequestStat, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.RequestStat), nil
	}
}

func (r requestStatDo) Last() (*types.RequestStat, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.RequestStat), nil
	}
}

func (r requestStatDo) Find() ([]*types.RequestStat, error) {
	result, err := r.DO.Find()
	return result.([]*types.RequestStat), err
}

func (r requestStatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.RequestStat, err error) {
	buf := make([]*types.RequestStat, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r requestStatDo) FindInBatches(result *[]*types.RequestStat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r requestStatDo) Attrs(attrs ...field.AssignExpr) IRequestStatDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r requestStatDo) Assign(attrs ...field.AssignExpr) IRequestStatDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r requestStatDo) Joins(fields ...field.RelationField) IRequestStatDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r requestStatDo) Preload(fields ...field.RelationField) IRequestStatDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r requestStatDo) FirstOrInit() (*types.RequestStat, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.RequestStat), nil
	}
}

func (r requestStatDo) FirstOrCreate() (*types.RequestStat, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.RequestStat), nil
	}
}

func (r requestStatDo) FindByPage(offset int, limit int) (result []*types.RequestStat, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r requestStatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r requestStatDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r requestStatDo) Delete(models ...*types.RequestStat) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *requestStatDo) withDO(do gen.Dao) *requestStatDo {
	r.DO = *do.(*gen.DO)
	return r
}
