// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q           = new(Query)
	APIKey      *aPIKey
	Health      *health
	Model       *model
	Platform    *platform
	RequestStat *requestStat
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	APIKey = &Q.APIKey
	Health = &Q.Health
	Model = &Q.Model
	Platform = &Q.Platform
	RequestStat = &Q.RequestStat
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:          db,
		APIKey:      newAPIKey(db, opts...),
		Health:      newHealth(db, opts...),
		Model:       newModel(db, opts...),
		Platform:    newPlatform(db, opts...),
		RequestStat: newRequestStat(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	APIKey      aPIKey
	Health      health
	Model       model
	Platform    platform
	RequestStat requestStat
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		APIKey:      q.APIKey.clone(db),
		Health:      q.Health.clone(db),
		Model:       q.Model.clone(db),
		Platform:    q.Platform.clone(db),
		RequestStat: q.RequestStat.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:          db,
		APIKey:      q.APIKey.replaceDB(db),
		Health:      q.Health.replaceDB(db),
		Model:       q.Model.replaceDB(db),
		Platform:    q.Platform.replaceDB(db),
		RequestStat: q.RequestStat.replaceDB(db),
	}
}

type queryCtx struct {
	APIKey      IAPIKeyDo
	Health      IHealthDo
	Model       IModelDo
	Platform    IPlatformDo
	RequestStat IRequestStatDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		APIKey:      q.APIKey.WithContext(ctx),
		Health:      q.Health.WithContext(ctx),
		Model:       q.Model.WithContext(ctx),
		Platform:    q.Platform.WithContext(ctx),
		RequestStat: q.RequestStat.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
