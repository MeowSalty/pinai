// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MeowSalty/pinai/database/types"
)

func newAPIKey(db *gorm.DB, opts ...gen.DOOption) aPIKey {
	_aPIKey := aPIKey{}

	_aPIKey.aPIKeyDo.UseDB(db, opts...)
	_aPIKey.aPIKeyDo.UseModel(&types.APIKey{})

	tableName := _aPIKey.aPIKeyDo.TableName()
	_aPIKey.ALL = field.NewAsterisk(tableName)
	_aPIKey.ID = field.NewUint(tableName, "id")
	_aPIKey.PlatformID = field.NewUint(tableName, "platform_id")
	_aPIKey.Value = field.NewString(tableName, "value")
	_aPIKey.Platform = aPIKeyBelongsToPlatform{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Platform", "types.Platform"),
	}

	_aPIKey.fillFieldMap()

	return _aPIKey
}

type aPIKey struct {
	aPIKeyDo

	ALL        field.Asterisk
	ID         field.Uint
	PlatformID field.Uint
	Value      field.String
	Platform   aPIKeyBelongsToPlatform

	fieldMap map[string]field.Expr
}

func (a aPIKey) Table(newTableName string) *aPIKey {
	a.aPIKeyDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPIKey) As(alias string) *aPIKey {
	a.aPIKeyDo.DO = *(a.aPIKeyDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPIKey) updateTableName(table string) *aPIKey {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.PlatformID = field.NewUint(table, "platform_id")
	a.Value = field.NewString(table, "value")

	a.fillFieldMap()

	return a
}

func (a *aPIKey) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPIKey) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 4)
	a.fieldMap["id"] = a.ID
	a.fieldMap["platform_id"] = a.PlatformID
	a.fieldMap["value"] = a.Value

}

func (a aPIKey) clone(db *gorm.DB) aPIKey {
	a.aPIKeyDo.ReplaceConnPool(db.Statement.ConnPool)
	a.Platform.db = db.Session(&gorm.Session{Initialized: true})
	a.Platform.db.Statement.ConnPool = db.Statement.ConnPool
	return a
}

func (a aPIKey) replaceDB(db *gorm.DB) aPIKey {
	a.aPIKeyDo.ReplaceDB(db)
	a.Platform.db = db.Session(&gorm.Session{})
	return a
}

type aPIKeyBelongsToPlatform struct {
	db *gorm.DB

	field.RelationField
}

func (a aPIKeyBelongsToPlatform) Where(conds ...field.Expr) *aPIKeyBelongsToPlatform {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a aPIKeyBelongsToPlatform) WithContext(ctx context.Context) *aPIKeyBelongsToPlatform {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a aPIKeyBelongsToPlatform) Session(session *gorm.Session) *aPIKeyBelongsToPlatform {
	a.db = a.db.Session(session)
	return &a
}

func (a aPIKeyBelongsToPlatform) Model(m *types.APIKey) *aPIKeyBelongsToPlatformTx {
	return &aPIKeyBelongsToPlatformTx{a.db.Model(m).Association(a.Name())}
}

func (a aPIKeyBelongsToPlatform) Unscoped() *aPIKeyBelongsToPlatform {
	a.db = a.db.Unscoped()
	return &a
}

type aPIKeyBelongsToPlatformTx struct{ tx *gorm.Association }

func (a aPIKeyBelongsToPlatformTx) Find() (result *types.Platform, err error) {
	return result, a.tx.Find(&result)
}

func (a aPIKeyBelongsToPlatformTx) Append(values ...*types.Platform) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a aPIKeyBelongsToPlatformTx) Replace(values ...*types.Platform) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a aPIKeyBelongsToPlatformTx) Delete(values ...*types.Platform) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a aPIKeyBelongsToPlatformTx) Clear() error {
	return a.tx.Clear()
}

func (a aPIKeyBelongsToPlatformTx) Count() int64 {
	return a.tx.Count()
}

func (a aPIKeyBelongsToPlatformTx) Unscoped() *aPIKeyBelongsToPlatformTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type aPIKeyDo struct{ gen.DO }

type IAPIKeyDo interface {
	gen.SubQuery
	Debug() IAPIKeyDo
	WithContext(ctx context.Context) IAPIKeyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIKeyDo
	WriteDB() IAPIKeyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIKeyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIKeyDo
	Not(conds ...gen.Condition) IAPIKeyDo
	Or(conds ...gen.Condition) IAPIKeyDo
	Select(conds ...field.Expr) IAPIKeyDo
	Where(conds ...gen.Condition) IAPIKeyDo
	Order(conds ...field.Expr) IAPIKeyDo
	Distinct(cols ...field.Expr) IAPIKeyDo
	Omit(cols ...field.Expr) IAPIKeyDo
	Join(table schema.Tabler, on ...field.Expr) IAPIKeyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIKeyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIKeyDo
	Group(cols ...field.Expr) IAPIKeyDo
	Having(conds ...gen.Condition) IAPIKeyDo
	Limit(limit int) IAPIKeyDo
	Offset(offset int) IAPIKeyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIKeyDo
	Unscoped() IAPIKeyDo
	Create(values ...*types.APIKey) error
	CreateInBatches(values []*types.APIKey, batchSize int) error
	Save(values ...*types.APIKey) error
	First() (*types.APIKey, error)
	Take() (*types.APIKey, error)
	Last() (*types.APIKey, error)
	Find() ([]*types.APIKey, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.APIKey, err error)
	FindInBatches(result *[]*types.APIKey, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.APIKey) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIKeyDo
	Assign(attrs ...field.AssignExpr) IAPIKeyDo
	Joins(fields ...field.RelationField) IAPIKeyDo
	Preload(fields ...field.RelationField) IAPIKeyDo
	FirstOrInit() (*types.APIKey, error)
	FirstOrCreate() (*types.APIKey, error)
	FindByPage(offset int, limit int) (result []*types.APIKey, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIKeyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPIKeyDo) Debug() IAPIKeyDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIKeyDo) WithContext(ctx context.Context) IAPIKeyDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIKeyDo) ReadDB() IAPIKeyDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIKeyDo) WriteDB() IAPIKeyDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIKeyDo) Session(config *gorm.Session) IAPIKeyDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIKeyDo) Clauses(conds ...clause.Expression) IAPIKeyDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIKeyDo) Returning(value interface{}, columns ...string) IAPIKeyDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIKeyDo) Not(conds ...gen.Condition) IAPIKeyDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIKeyDo) Or(conds ...gen.Condition) IAPIKeyDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIKeyDo) Select(conds ...field.Expr) IAPIKeyDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIKeyDo) Where(conds ...gen.Condition) IAPIKeyDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIKeyDo) Order(conds ...field.Expr) IAPIKeyDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIKeyDo) Distinct(cols ...field.Expr) IAPIKeyDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIKeyDo) Omit(cols ...field.Expr) IAPIKeyDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIKeyDo) Join(table schema.Tabler, on ...field.Expr) IAPIKeyDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIKeyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIKeyDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIKeyDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIKeyDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIKeyDo) Group(cols ...field.Expr) IAPIKeyDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIKeyDo) Having(conds ...gen.Condition) IAPIKeyDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIKeyDo) Limit(limit int) IAPIKeyDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIKeyDo) Offset(offset int) IAPIKeyDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIKeyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIKeyDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIKeyDo) Unscoped() IAPIKeyDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIKeyDo) Create(values ...*types.APIKey) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIKeyDo) CreateInBatches(values []*types.APIKey, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIKeyDo) Save(values ...*types.APIKey) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIKeyDo) First() (*types.APIKey, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.APIKey), nil
	}
}

func (a aPIKeyDo) Take() (*types.APIKey, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.APIKey), nil
	}
}

func (a aPIKeyDo) Last() (*types.APIKey, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.APIKey), nil
	}
}

func (a aPIKeyDo) Find() ([]*types.APIKey, error) {
	result, err := a.DO.Find()
	return result.([]*types.APIKey), err
}

func (a aPIKeyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.APIKey, err error) {
	buf := make([]*types.APIKey, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIKeyDo) FindInBatches(result *[]*types.APIKey, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIKeyDo) Attrs(attrs ...field.AssignExpr) IAPIKeyDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIKeyDo) Assign(attrs ...field.AssignExpr) IAPIKeyDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIKeyDo) Joins(fields ...field.RelationField) IAPIKeyDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIKeyDo) Preload(fields ...field.RelationField) IAPIKeyDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIKeyDo) FirstOrInit() (*types.APIKey, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.APIKey), nil
	}
}

func (a aPIKeyDo) FirstOrCreate() (*types.APIKey, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.APIKey), nil
	}
}

func (a aPIKeyDo) FindByPage(offset int, limit int) (result []*types.APIKey, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIKeyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIKeyDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIKeyDo) Delete(models ...*types.APIKey) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIKeyDo) withDO(do gen.Dao) *aPIKeyDo {
	a.DO = *do.(*gen.DO)
	return a
}
