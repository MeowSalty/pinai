// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/MeowSalty/pinai/database/types"
)

func newChannelInfo(db *gorm.DB, opts ...gen.DOOption) channelInfo {
	_channelInfo := channelInfo{}

	_channelInfo.channelInfoDo.UseDB(db, opts...)
	_channelInfo.channelInfoDo.UseModel(&types.ChannelInfo{})

	tableName := _channelInfo.channelInfoDo.TableName()
	_channelInfo.ALL = field.NewAsterisk(tableName)
	_channelInfo.PlatformID = field.NewUint(tableName, "platform_id")
	_channelInfo.APIKeyID = field.NewUint(tableName, "api_key_id")
	_channelInfo.ModelID = field.NewUint(tableName, "model_id")

	_channelInfo.fillFieldMap()

	return _channelInfo
}

type channelInfo struct {
	channelInfoDo channelInfoDo

	ALL        field.Asterisk
	PlatformID field.Uint
	APIKeyID   field.Uint
	ModelID    field.Uint

	fieldMap map[string]field.Expr
}

func (c channelInfo) Table(newTableName string) *channelInfo {
	c.channelInfoDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c channelInfo) As(alias string) *channelInfo {
	c.channelInfoDo.DO = *(c.channelInfoDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *channelInfo) updateTableName(table string) *channelInfo {
	c.ALL = field.NewAsterisk(table)
	c.PlatformID = field.NewUint(table, "platform_id")
	c.APIKeyID = field.NewUint(table, "api_key_id")
	c.ModelID = field.NewUint(table, "model_id")

	c.fillFieldMap()

	return c
}

func (c *channelInfo) WithContext(ctx context.Context) IChannelInfoDo {
	return c.channelInfoDo.WithContext(ctx)
}

func (c channelInfo) TableName() string { return c.channelInfoDo.TableName() }

func (c channelInfo) Alias() string { return c.channelInfoDo.Alias() }

func (c channelInfo) Columns(cols ...field.Expr) gen.Columns { return c.channelInfoDo.Columns(cols...) }

func (c *channelInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *channelInfo) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["platform_id"] = c.PlatformID
	c.fieldMap["api_key_id"] = c.APIKeyID
	c.fieldMap["model_id"] = c.ModelID
}

func (c channelInfo) clone(db *gorm.DB) channelInfo {
	c.channelInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c channelInfo) replaceDB(db *gorm.DB) channelInfo {
	c.channelInfoDo.ReplaceDB(db)
	return c
}

type channelInfoDo struct{ gen.DO }

type IChannelInfoDo interface {
	gen.SubQuery
	Debug() IChannelInfoDo
	WithContext(ctx context.Context) IChannelInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChannelInfoDo
	WriteDB() IChannelInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChannelInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChannelInfoDo
	Not(conds ...gen.Condition) IChannelInfoDo
	Or(conds ...gen.Condition) IChannelInfoDo
	Select(conds ...field.Expr) IChannelInfoDo
	Where(conds ...gen.Condition) IChannelInfoDo
	Order(conds ...field.Expr) IChannelInfoDo
	Distinct(cols ...field.Expr) IChannelInfoDo
	Omit(cols ...field.Expr) IChannelInfoDo
	Join(table schema.Tabler, on ...field.Expr) IChannelInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChannelInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChannelInfoDo
	Group(cols ...field.Expr) IChannelInfoDo
	Having(conds ...gen.Condition) IChannelInfoDo
	Limit(limit int) IChannelInfoDo
	Offset(offset int) IChannelInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChannelInfoDo
	Unscoped() IChannelInfoDo
	Create(values ...*types.ChannelInfo) error
	CreateInBatches(values []*types.ChannelInfo, batchSize int) error
	Save(values ...*types.ChannelInfo) error
	First() (*types.ChannelInfo, error)
	Take() (*types.ChannelInfo, error)
	Last() (*types.ChannelInfo, error)
	Find() ([]*types.ChannelInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.ChannelInfo, err error)
	FindInBatches(result *[]*types.ChannelInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*types.ChannelInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChannelInfoDo
	Assign(attrs ...field.AssignExpr) IChannelInfoDo
	Joins(fields ...field.RelationField) IChannelInfoDo
	Preload(fields ...field.RelationField) IChannelInfoDo
	FirstOrInit() (*types.ChannelInfo, error)
	FirstOrCreate() (*types.ChannelInfo, error)
	FindByPage(offset int, limit int) (result []*types.ChannelInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChannelInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c channelInfoDo) Debug() IChannelInfoDo {
	return c.withDO(c.DO.Debug())
}

func (c channelInfoDo) WithContext(ctx context.Context) IChannelInfoDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c channelInfoDo) ReadDB() IChannelInfoDo {
	return c.Clauses(dbresolver.Read)
}

func (c channelInfoDo) WriteDB() IChannelInfoDo {
	return c.Clauses(dbresolver.Write)
}

func (c channelInfoDo) Session(config *gorm.Session) IChannelInfoDo {
	return c.withDO(c.DO.Session(config))
}

func (c channelInfoDo) Clauses(conds ...clause.Expression) IChannelInfoDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c channelInfoDo) Returning(value interface{}, columns ...string) IChannelInfoDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c channelInfoDo) Not(conds ...gen.Condition) IChannelInfoDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c channelInfoDo) Or(conds ...gen.Condition) IChannelInfoDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c channelInfoDo) Select(conds ...field.Expr) IChannelInfoDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c channelInfoDo) Where(conds ...gen.Condition) IChannelInfoDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c channelInfoDo) Order(conds ...field.Expr) IChannelInfoDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c channelInfoDo) Distinct(cols ...field.Expr) IChannelInfoDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c channelInfoDo) Omit(cols ...field.Expr) IChannelInfoDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c channelInfoDo) Join(table schema.Tabler, on ...field.Expr) IChannelInfoDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c channelInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChannelInfoDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c channelInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IChannelInfoDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c channelInfoDo) Group(cols ...field.Expr) IChannelInfoDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c channelInfoDo) Having(conds ...gen.Condition) IChannelInfoDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c channelInfoDo) Limit(limit int) IChannelInfoDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c channelInfoDo) Offset(offset int) IChannelInfoDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c channelInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChannelInfoDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c channelInfoDo) Unscoped() IChannelInfoDo {
	return c.withDO(c.DO.Unscoped())
}

func (c channelInfoDo) Create(values ...*types.ChannelInfo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c channelInfoDo) CreateInBatches(values []*types.ChannelInfo, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c channelInfoDo) Save(values ...*types.ChannelInfo) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c channelInfoDo) First() (*types.ChannelInfo, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*types.ChannelInfo), nil
	}
}

func (c channelInfoDo) Take() (*types.ChannelInfo, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*types.ChannelInfo), nil
	}
}

func (c channelInfoDo) Last() (*types.ChannelInfo, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*types.ChannelInfo), nil
	}
}

func (c channelInfoDo) Find() ([]*types.ChannelInfo, error) {
	result, err := c.DO.Find()
	return result.([]*types.ChannelInfo), err
}

func (c channelInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*types.ChannelInfo, err error) {
	buf := make([]*types.ChannelInfo, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c channelInfoDo) FindInBatches(result *[]*types.ChannelInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c channelInfoDo) Attrs(attrs ...field.AssignExpr) IChannelInfoDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c channelInfoDo) Assign(attrs ...field.AssignExpr) IChannelInfoDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c channelInfoDo) Joins(fields ...field.RelationField) IChannelInfoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c channelInfoDo) Preload(fields ...field.RelationField) IChannelInfoDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c channelInfoDo) FirstOrInit() (*types.ChannelInfo, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*types.ChannelInfo), nil
	}
}

func (c channelInfoDo) FirstOrCreate() (*types.ChannelInfo, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*types.ChannelInfo), nil
	}
}

func (c channelInfoDo) FindByPage(offset int, limit int) (result []*types.ChannelInfo, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c channelInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c channelInfoDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c channelInfoDo) Delete(models ...*types.ChannelInfo) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *channelInfoDo) withDO(do gen.Dao) *channelInfoDo {
	c.DO = *do.(*gen.DO)
	return c
}
