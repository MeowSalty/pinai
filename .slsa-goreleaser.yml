# 此配置文件的版本。
version: 1

# （可选）编译过程中使用的环境变量列表。
env:
  - GO111MODULE=on # 强制启用 Go 模块模式
  - CGO_ENABLED=0 # 禁用 CGO，生成纯静态链接的二进制文件，兼容性更好

# （可选）传递给 Go 编译器的标志（flags）。
flags:
  - -trimpath # 重要：从编译结果中移除所有文件系统路径，提高可重现构建的能力和安全性
  - -tags=netgo # 指定使用纯 Go 实现的网络解析器，而不是依赖于系统的 C 库（尤其是在禁用 CGO 时有用）

# 要编译的目标操作系统。`GOOS` 环境变量将被设置为这个值。
goos:
  - linux
  - darwin
  - windows

# 要编译的目标 CPU 架构。`GOARCH` 环境变量将被设置为这个值。
goarch:
  - amd64
  - 386
  - arm64

# 忽略列表：跳过某些无效的 os/arch 组合
ignore:
  - goos: darwin
    goarch: 386 # 忽略已经停止支持的 32 位 Darwin

# （可选）要编译的主程序入口点（通常是包含 main 函数的 .go 文件）。
main: ./app.go

# （可选）执行编译命令时的工作目录。（默认为项目的根目录）
# dir: ./relative/path/to/dir

# 输出的二进制文件名称。
# 这是一个模板，其中的变量会被自动替换：
# {{ .Os }} 将被替换为此配置文件中 `goos` 字段的值。
# {{ .Arch }} 将被替换为此配置文件中 `goarch` 字段的值。
binary: PinAI-{{ .Os }}-{{ .Arch }} # 例如，根据上面的配置，将生成名为 'binary-linux-amd64' 的文件

# （可选）链接器标志（ldflags），用于在编译时动态地向程序中嵌入信息。
# 这些标志的值会在工作流程运行时动态生成，并作为工作流程的 `evaluated-envs` 输入变量进行设置。
ldflags:
  - "-X main.Version={{ .Env.VERSION }}" # 将 main 包中的 Version 变量设置为环境变量 VERSION 的值
  - "-X main.Commit={{ .Env.COMMIT }}" # 将 main 包中的 Commit 变量设置为环境变量 COMMIT 的值（通常是 git commit hash）
  - "-X main.CommitDate={{ .Env.COMMIT_DATE }}" # 将 main 包中的 CommitDate 变量设置为环境变量 COMMIT_DATE 的值
  - "-X main.TreeState={{ .Env.TREE_STATE }}" # 将 main 包中的 TreeState 变量设置为环境变量 TREE_STATE 的值（例如 'clean' 或 'dirty'，表示构建时代码库的状态）
  - "-a" # 禁用 Go 缓存，每次编译都会生成新的二进制文件
  - "-installsuffix cgo"
